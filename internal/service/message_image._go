// package service

// import (
// 	"errors"
// 	"fmt"
// 	"os"

// 	"github.com/mikalai2006/swapland-api/graph/model"
// 	"github.com/mikalai2006/swapland-api/internal/config"
// 	"github.com/mikalai2006/swapland-api/internal/repository"
// 	"github.com/mikalai2006/swapland-api/internal/utils"
// )

// type MessageImageService struct {
// 	repo        repository.MessageImage
// 	imageConfig config.IImageConfig
// }

// func NewMessageImageService(repo repository.MessageImage, imageConfig config.IImageConfig) *MessageImageService {
// 	return &MessageImageService{repo: repo, imageConfig: imageConfig}
// }

// // func (s *ImageService) FindImage(params domain.RequestParams) (domain.Response[model.Image], error) {
// // 	return s.repo.FindImage(params)
// // }

// func (s *MessageImageService) GetMessageImage(id string) (model.MessageImage, error) {
// 	return s.repo.GetMessageImage(id)
// }

// //	func (s *ImageService) GetImageDirs(id string) ([]interface{}, error) {
// //		return s.repo.GetImageDirs(id)
// //	}
// func (s *MessageImageService) CreateMessageImage(userID string, image *model.MessageImageInput) (model.MessageImage, error) {
// 	var result model.MessageImage

// 	result, err := s.repo.CreateMessageImage(userID, image)

// 	return result, err
// }

// func (s *MessageImageService) DeleteMessageImage(id string) (model.MessageImage, error) {
// 	result := model.MessageImage{}
// 	imageForRemove, err := s.repo.GetMessageImage(id)
// 	if err != nil {
// 		return result, err
// 	}
// 	if imageForRemove.Service == "" {
// 		return result, errors.New("not found item [image message] for remove")
// 	} else {
// 		pathOfRemove := fmt.Sprintf("public/%s/%s", imageForRemove.UserID.Hex(), imageForRemove.Service)

// 		if imageForRemove.MessageID != "" {
// 			pathOfRemove = fmt.Sprintf("%s/%s", pathOfRemove, imageForRemove.MessageID)
// 		}

// 		pathRemove := fmt.Sprintf("%s/%s%s", pathOfRemove, imageForRemove.Path, imageForRemove.Ext)
// 		os.Remove(pathRemove)
// 		// if err != nil {
// 		// 	return result, err
// 		// }

// 		// // remove srcset.
// 		// for i := range s.imageConfig.Sizes {
// 		// 	dataImg := s.imageConfig.Sizes[i]
// 		// 	pathRemove = fmt.Sprintf("%s/%v-%s%s", pathOfRemove, dataImg.Size, imageForRemove.Path, imageForRemove.Ext) // ".webp"
// 		// 	// fmt.Println("pathRemove2=", pathRemove)
// 		// 	os.Remove(pathRemove)
// 		// 	// if err != nil {
// 		// 	// 	return result, err
// 		// 	// }
// 		// }

// 		isEmpty, err := utils.IsEmptyDir(pathOfRemove)
// 		if err != nil {
// 			return result, err
// 		}
// 		if isEmpty {
// 			err = os.Remove(pathOfRemove)
// 			if err != nil {
// 				return result, err
// 			}
// 		}

// 		// pathRemove = fmt.Sprintf("%s/xs-%s", pathOfRemove, imageForRemove.Path)
// 		// err = os.Remove(pathRemove)
// 		// if err != nil {
// 		// 	appG.ResponseError(http.StatusBadRequest, err, nil)
// 		// }
// 		// pathRemove = fmt.Sprintf("%s/lg-%s", pathOfRemove, imageForRemove.Path)
// 		// err = os.Remove(pathRemove)
// 		// if err != nil {
// 		// 	appG.ResponseError(http.StatusBadRequest, err, nil)
// 		// }
// 	}

// 	return s.repo.DeleteMessageImage(id)
// }
