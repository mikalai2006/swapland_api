// package repository

// import (
// 	"context"
// 	"time"

// 	"github.com/mikalai2006/swapland-api/graph/model"
// 	"github.com/mikalai2006/swapland-api/internal/config"
// 	"go.mongodb.org/mongo-driver/bson"
// 	"go.mongodb.org/mongo-driver/bson/primitive"
// 	"go.mongodb.org/mongo-driver/mongo"
// )

// type MessageImageMongo struct {
// 	db   *mongo.Database
// 	i18n config.I18nConfig
// }

// func NewMessageImageMongo(db *mongo.Database, i18n config.I18nConfig) *MessageImageMongo {
// 	return &MessageImageMongo{db: db, i18n: i18n}
// }

// func (r *MessageImageMongo) CreateMessageImage(userID string, data *model.MessageImageInput) (model.MessageImage, error) {
// 	var result model.MessageImage

// 	collection := r.db.Collection(TblMessageImage)

// 	ctx, cancel := context.WithTimeout(context.Background(), MongoQueryTimeout)
// 	defer cancel()

// 	userIDPrimitive, err := primitive.ObjectIDFromHex(userID)
// 	if err != nil {
// 		return result, err
// 	}

// 	roomIDPrimitive, err := primitive.ObjectIDFromHex(data.RoomID)
// 	if err != nil {
// 		return result, err
// 	}

// 	messageIDPrimitive, err := primitive.ObjectIDFromHex(data.MessageID)
// 	if err != nil {
// 		return result, err
// 	}
// 	// var ServiceID primitive.ObjectID
// 	// if data.ServiceID != "" {
// 	// 	ServiceID, err = primitive.ObjectIDFromHex(data.ServiceID)
// 	// 	if err != nil {
// 	// 		return result, err
// 	// 	}
// 	// } else {
// 	// 	ServiceID = primitive.NilObjectID
// 	// }

// 	newImage := model.MessageImageInputMongo{
// 		UserID:      userIDPrimitive,
// 		RoomID:      roomIDPrimitive,
// 		MessageID:   messageIDPrimitive,
// 		Service:     data.Service,
// 		Path:        data.Path,
// 		Title:       data.Title,
// 		Ext:         data.Ext,
// 		Dir:         data.Dir,
// 		Description: data.Description,
// 		CreatedAt:   time.Now(),
// 		UpdatedAt:   time.Now(),
// 	}
// 	// if primitive.IsValidObjectID(data.ServiceID) {
// 	// 	serviceIDPrimitive, err := primitive.ObjectIDFromHex(data.ServiceID)
// 	// 	if err != nil {
// 	// 		return result, err
// 	// 	}
// 	// 	newImage.ServiceID = serviceIDPrimitive
// 	// 	fmt.Println("valid serviceId")
// 	// }

// 	res, err := collection.InsertOne(ctx, newImage)
// 	if err != nil {
// 		return result, err
// 	}

// 	err = collection.FindOne(ctx, bson.M{"_id": res.InsertedID}).Decode(&result)
// 	if err != nil {
// 		return result, err
// 	}

// 	return result, nil
// }

// func (r *MessageImageMongo) GetMessageImage(id string) (model.MessageImage, error) {
// 	var result model.MessageImage

// 	ctx, cancel := context.WithTimeout(context.Background(), MongoQueryTimeout)
// 	defer cancel()

// 	userIDPrimitive, err := primitive.ObjectIDFromHex(id)
// 	if err != nil {
// 		return result, err
// 	}

// 	filter := bson.M{"_id": userIDPrimitive}

// 	err = r.db.Collection(TblMessageImage).FindOne(ctx, filter).Decode(&result)
// 	if err != nil {
// 		return result, err
// 	}

// 	return result, nil
// }

// // func (r *ImageMongo) GetImageDirs(id string) ([]interface{}, error) {
// // 	var result []interface{}

// // 	ctx, cancel := context.WithTimeout(context.Background(), MongoQueryTimeout)
// // 	defer cancel()

// // 	userIDPrimitive, err := primitive.ObjectIDFromHex(id)
// // 	if err != nil {
// // 		return result, err
// // 	}

// // 	filter := bson.M{"user_id": userIDPrimitive}
// // 	// pipe := mongo.Pipeline{}

// // 	// pipe = append(pipe, bson.D{{"$match", bson.M{"user_id": userIDPrimitive}}})
// // 	// pipe = append(pipe, bson.D{{Key: "$lookup", Value: bson.M{
// // 	// 	"from":         "component_presets",
// // 	// 	"as":           "presets",
// // 	// 	"localField":   "_id",
// // 	// 	"foreignField": "component_id",
// // 	// }}})

// // 	result, err = r.db.Collection(tblImage).Distinct(ctx, "dir", filter) //.Aggregate(ctx, pipe) // (ctx, filter).Decode(&result)
// // 	if err != nil {
// // 		return result, err
// // 	}

// // 	return result, nil
// // }

// // func (r *ImageMongo) FindImage(params domain.RequestParams) (domain.Response[model.Image], error) {
// // 	var results []model.Image
// // 	var response domain.Response[model.Image]

// // 	ctx, cancel := context.WithTimeout(context.Background(), MongoQueryTimeout)
// // 	defer cancel()

// // 	collection := r.db.Collection(tblImage)

// // 	pipe, err := CreatePipeline(params, &r.i18n)
// // 	if err != nil {
// // 		return domain.Response[model.Image]{}, err
// // 	}

// // 	cursor, err := collection.Aggregate(ctx, pipe)
// // 	if err != nil {
// // 		return response, err
// // 	}
// // 	defer cursor.Close(ctx)

// // 	if er := cursor.All(ctx, &results); er != nil {
// // 		return response, er
// // 	}

// // 	resultSlice := make([]model.Image, len(results))
// // 	copy(resultSlice, results)

// // 	var options options.CountOptions
// // 	// options.SetLimit(params.Limit)
// // 	// options.SetSkip(params.Skip)
// // 	count, err := collection.CountDocuments(ctx, params.Filter, &options)
// // 	if err != nil {
// // 		return response, err
// // 	}

// // 	response = domain.Response[model.Image]{
// // 		Total: int(count),
// // 		Skip:  int(params.Options.Skip),
// // 		Limit: int(params.Options.Limit),
// // 		Data:  resultSlice,
// // 	}
// // 	return response, nil
// // }

// func (r *MessageImageMongo) DeleteMessageImage(id string) (model.MessageImage, error) {
// 	var result = model.MessageImage{}

// 	ctx, cancel := context.WithTimeout(context.Background(), MongoQueryTimeout)
// 	defer cancel()

// 	collection := r.db.Collection(TblMessageImage)

// 	idPrimitive, err := primitive.ObjectIDFromHex(id)
// 	if err != nil {
// 		return result, err
// 	}

// 	filter := bson.M{"_id": idPrimitive}

// 	err = collection.FindOne(ctx, filter).Decode(&result)
// 	if err != nil {
// 		return result, err
// 	}

// 	_, err = collection.DeleteOne(ctx, filter)
// 	if err != nil {
// 		return result, err
// 	}

// 	return result, nil
// }
