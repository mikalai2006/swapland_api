package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"

	"github.com/mikalai2006/swapland-api/graph/generated"
	"github.com/mikalai2006/swapland-api/graph/model"
	"github.com/mikalai2006/swapland-api/internal/domain"
	"github.com/mikalai2006/swapland-api/internal/repository"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// ID is the resolver for the _id field.
func (r *addressResolver) ID(ctx context.Context, obj *model.Address) (string, error) {
	return obj.ID.Hex(), nil
}

// Address is the resolver for the address field.
func (r *addressResolver) Address(ctx context.Context, obj *model.Address) (any, error) {
	return obj.Address, nil
}

// Props is the resolver for the props field.
func (r *addressResolver) Props(ctx context.Context, obj *model.Address) (any, error) {
	return obj.Props, nil
}

// Addresses is the resolver for the addresses field.
func (r *queryResolver) Addresses(ctx context.Context, first *int, after *string, limit *int, skip *int, input *model.FetchAddress) (*model.PaginationAddress, error) {
	var results *model.PaginationAddress

	allItems, err := r.Repo.Address.GqlGetAdresses(domain.RequestParams{
		Options: domain.Options{Limit: int64(*limit)},
		Filter:  bson.D{},
	})
	if err != nil {
		return results, err
	}

	data := make([]*model.Address, len(allItems))
	for i, _ := range allItems {

		data[i] = allItems[i]
	}

	total := 0
	results = &model.PaginationAddress{
		Total: &total,
		Data:  data,
		Limit: limit,
		Skip:  skip,
	}
	return results, nil
}

// Address is the resolver for the address field.
func (r *queryResolver) Address(ctx context.Context, id *string) (*model.Address, error) {
	var result *model.Address

	filter := bson.D{}
	if id != nil {
		userIDPrimitive, err := primitive.ObjectIDFromHex(*id)
		if err != nil {
			return result, err
		}

		filter = append(filter, bson.E{"_id", userIDPrimitive})
	}
	//  else if input.OsmID != nil {
	// 	filter = append(filter, bson.E{"osm_id", *input.OsmID})
	// }

	if err := r.DB.Collection(repository.TblAddress).FindOne(ctx, filter).Decode(&result); err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return result, model.ErrAddressNotFound
		}
		return result, err
	}
	return result, nil
}

// Address returns generated.AddressResolver implementation.
func (r *Resolver) Address() generated.AddressResolver { return &addressResolver{r} }

type addressResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *addressResolver) CreatedAt(ctx context.Context, obj *model.Address) (string, error) {
	return obj.CreatedAt.String(), nil
}
func (r *addressResolver) UpdatedAt(ctx context.Context, obj *model.Address) (string, error) {
	return obj.UpdatedAt.String(), nil
}
