package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/mikalai2006/swapland-api/graph/generated"
	"github.com/mikalai2006/swapland-api/graph/model"
)

// ID is the resolver for the id field.
func (r *offerResolver) ID(ctx context.Context, obj *model.Offer) (string, error) {
	return obj.ID.Hex(), nil
}

// UserID is the resolver for the userId field.
func (r *offerResolver) UserID(ctx context.Context, obj *model.Offer) (string, error) {
	return obj.UserID.Hex(), nil
}

// ProductID is the resolver for the productId field.
func (r *offerResolver) ProductID(ctx context.Context, obj *model.Offer) (string, error) {
	return obj.ProductID.Hex(), nil
}

// Offers is the resolver for the offers field.
func (r *queryResolver) Offers(ctx context.Context, first *int, after *string, limit *int, skip *int, input *model.FetchOffer) (*model.PaginationOffer, error) {
	panic(fmt.Errorf("not implemented: Offers - offers"))
}

// Offer is the resolver for the offer field.
func (r *queryResolver) Offer(ctx context.Context, id *string) (*model.Offer, error) {
	panic(fmt.Errorf("not implemented: Offer - offer"))
}

// Offer returns generated.OfferResolver implementation.
func (r *Resolver) Offer() generated.OfferResolver { return &offerResolver{r} }

type offerResolver struct{ *Resolver }
