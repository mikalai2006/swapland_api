package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/mikalai2006/swapland-api/graph/generated"
	"github.com/mikalai2006/swapland-api/graph/model"
	"github.com/mikalai2006/swapland-api/internal/domain"
	"github.com/mikalai2006/swapland-api/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *imageResolver) ID(ctx context.Context, obj *model.Image) (string, error) {
	return obj.ID.Hex(), nil
}

// UserID is the resolver for the userId field.
func (r *imageResolver) UserID(ctx context.Context, obj *model.Image) (string, error) {
	return obj.UserID.Hex(), nil
}

// User is the resolver for the user field.
func (r *imageResolver) User(ctx context.Context, obj *model.Image) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Images is the resolver for the images field.
func (r *queryResolver) Images(ctx context.Context, limit *int, skip *int, input *model.FetchImage) (*model.PaginationImage, error) {
	panic(fmt.Errorf("not implemented: Images - images"))
}

// Image is the resolver for the image field.
func (r *queryResolver) Image(ctx context.Context, input *model.FetchImage) (*model.Image, error) {
	var result *model.Image
	gc, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return result, err
	}
	lang := gc.MustGet("i18nLocale").(string)

	filter := bson.D{}
	if input.ID != nil {
		userIDPrimitive, err := primitive.ObjectIDFromHex(*input.ID)
		if err != nil {
			return result, err
		}

		filter = append(filter, bson.E{"_id", userIDPrimitive})
	}

	allItems, err := r.Repo.Image.GqlGetImages(domain.RequestParams{
		Options: domain.Options{Limit: 1, Skip: 0},
		Filter:  filter,
		Lang:    lang,
	})
	if err != nil {
		return result, err
	}

	if len(allItems) > 0 {
		result = allItems[0]
	}

	return result, nil
}

// Image returns generated.ImageResolver implementation.
func (r *Resolver) Image() generated.ImageResolver { return &imageResolver{r} }

type imageResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *imageResolver) UpdatedAt(ctx context.Context, obj *model.Image) (string, error) {
	return obj.UpdatedAt.String(), nil
}
func (r *imageResolver) CreatedAt(ctx context.Context, obj *model.Image) (string, error) {
	return obj.CreatedAt.String(), nil
}
