package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"

	"github.com/mikalai2006/swapland-api/graph/generated"
	"github.com/mikalai2006/swapland-api/graph/model"
	"github.com/mikalai2006/swapland-api/internal/domain"
	"github.com/mikalai2006/swapland-api/internal/repository"
	"github.com/mikalai2006/swapland-api/internal/utils"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// ID is the resolver for the _id field.
func (r *categoryResolver) ID(ctx context.Context, obj *model.Category) (string, error) {
	return obj.ID.Hex(), nil
}

// UserID is the resolver for the userId field.
func (r *categoryResolver) UserID(ctx context.Context, obj *model.Category) (string, error) {
	return obj.UserID.Hex(), nil
}

// Props is the resolver for the props field.
func (r *categoryResolver) Props(ctx context.Context, obj *model.Category) (any, error) {
	return obj.Props, nil
}

// Parent is the resolver for the parent field.
func (r *categoryResolver) Parent(ctx context.Context, obj *model.Category) (string, error) {
	return obj.Parent.Hex(), nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, limit *int, skip *int, input *model.FetchCategory) (*model.PaginationCategory, error) {
	var results *model.PaginationCategory
	gc, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return results, err
	}
	lang := gc.MustGet("i18nLocale").(string)

	allItems, err := r.Repo.Category.GqlGetCategorys(domain.RequestParams{
		Options: domain.Options{Limit: int64(*limit)},
		Filter:  bson.D{},
		Lang:    lang,
	})
	if err != nil {
		return results, err
	}

	items := make([]*model.Category, len(allItems))
	for i, _ := range allItems {

		items[i] = allItems[i]
	}

	count, err := r.DB.Collection(repository.TblCategory).CountDocuments(ctx, bson.M{})
	if err != nil {
		return results, err
	}
	countInt := int(count)

	results = &model.PaginationCategory{
		Data:  items,
		Total: &countInt,
	}
	if skip != nil {
		results.Skip = skip
	}
	if limit != nil {
		results.Limit = limit
	}

	return results, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id *string) (*model.Category, error) {
	var result *model.Category
	gc, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return result, err
	}
	lang := gc.MustGet("i18nLocale").(string)

	filter := bson.D{}
	if id != nil {
		userIDPrimitive, err := primitive.ObjectIDFromHex(*id)
		if err != nil {
			return result, err
		}

		filter = append(filter, bson.E{"_id", userIDPrimitive})
	}

	// if err := r.DB.Collection(repository.TblAmenity).FindOne(ctx, filter).Decode(&result); err != nil {
	// 	if errors.Is(err, mongo.ErrNoDocuments) {
	// 		return result, model.ErrAmenityNotFound
	// 	}
	// 	return result, err
	// }
	allItems, err := r.Repo.Category.GqlGetCategorys(domain.RequestParams{
		Options: domain.Options{Limit: 1},
		Filter:  bson.D{},
		Lang:    lang,
	})
	if errors.Is(err, mongo.ErrNoDocuments) {
		return result, model.ErrAmenityNotFound
	}

	result = allItems[0]

	return result, nil
}

// Category returns generated.CategoryResolver implementation.
func (r *Resolver) Category() generated.CategoryResolver { return &categoryResolver{r} }

type categoryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *categoryResolver) CreatedAt(ctx context.Context, obj *model.Category) (string, error) {
	return obj.CreatedAt.String(), nil
}
func (r *categoryResolver) UpdatedAt(ctx context.Context, obj *model.Category) (string, error) {
	return obj.UpdatedAt.String(), nil
}
